// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------
// ENUM DEFINITIONS
// -----------------------------------------------------------
enum UserRole {
  JOB_SEEKER
  COMPANY_ADMIN
  DEVELOPER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ApplicationStatus {
  SUBMITTED
  REVIEWED
  ACCEPTED
  REJECTED
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

enum InterviewType {
  ONLINE
  OFFLINE
  HYBRID
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  PENDING
}

enum QuestionOption {
  A
  B
  C
  D
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentMethod {
  BANK_TRANSFER
  EWALLET
  CREDIT_CARD
}

// -----------------------------------------------------------
// CORE TABLES
// -----------------------------------------------------------
model Users {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role              UserRole  @default(JOB_SEEKER)
  name              String    @db.VarChar(100)
  email             String    @unique @db.VarChar(100)
  password          String    @db.VarChar(255)
  dob               DateTime?
  gender            Gender?
  education         String?   @db.VarChar(100)
  address           String?
  profile_image_url String?   @db.VarChar(255)
  verified          Boolean   @default(false)
  deleted_at        DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  authProviders         UserAuthProviders[]
  companyAdmins         CompanyAdmins[]
  applications          Applications[]
  applicationHistories  ApplicationHistories[] @relation("HistoryChangedBy")
  interviews            Interviews[]           @relation("InterviewChangedBy")
  subscriptions         Subscriptions[]
  approvedSubscriptions Subscriptions[]        @relation("ApprovedBy")
  skills                UserSkills[]

  @@index([deleted_at])
}

model UserAuthProviders {
  id            Int      @id @default(autoincrement())
  user_id       String   @db.Uuid
  provider_name String   @db.VarChar(50)
  provider_id   String   @db.VarChar(255)
  created_at    DateTime @default(now())

  user Users @relation(fields: [user_id], references: [id])
}

model Companies {
  id             Int       @id @default(autoincrement())
  name           String    @db.VarChar(100)
  email          String    @unique @db.VarChar(100)
  phone          String    @db.VarChar(50)
  description    String?
  location       String?   @db.VarChar(150)
  logo_image_url String?   @db.VarChar(255)
  deleted_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  admins  CompanyAdmins[]
  socials CompanySocialLinks[]
  jobs    Jobs[]
  tags    CompanyTags[]

  @@index([deleted_at])
  @@index([name])
}

model CompanyAdmins {
  user_id    String   @db.Uuid
  company_id Int
  is_primary Boolean @default(false)
  role       String  @db.VarChar(50)

  user    Users     @relation(fields: [user_id], references: [id])
  company Companies @relation(fields: [company_id], references: [id])

  @@id([user_id, company_id])
  @@unique([company_id, is_primary])
}

model CompanySocialLinks {
  id         Int       @id @default(autoincrement())
  company_id Int
  platform   String    @db.VarChar(50)
  url        String    @db.VarChar(255)
  deleted_at DateTime?

  company Companies @relation(fields: [company_id], references: [id])

  @@index([deleted_at])
}

model Categories {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(100)

  jobs Jobs[]
}

model Provinces {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  cities Cities[]
}

model Cities {
  id          Int      @id @default(autoincrement())
  province_id Int
  name        String   @unique @db.VarChar(100)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  province Provinces @relation(fields: [province_id], references: [id])
  jobs     Jobs[]
}

model Jobs {
  id               Int       @id @default(autoincrement())
  company_id       Int
  category_id      Int
  city_id          Int
  title            String    @db.VarChar(150)
  description      String
  banner_image_url String?   @db.VarChar(255)
  min_salary       Decimal   @db.Decimal(12, 2)
  max_salary       Decimal   @db.Decimal(12, 2)
  deadline         DateTime
  is_published     Boolean
  deleted_at       DateTime?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  company          Companies          @relation(fields: [company_id], references: [id])
  category         Categories         @relation(fields: [category_id], references: [id])
  city             Cities             @relation(fields: [city_id], references: [id])
  tags             JobTags[]
  applications     Applications[]
  preSelectionTest PreSelectionTests?

  @@index([deleted_at])
  @@index([title])
}

model Tags {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(50)

  jobTags     JobTags[]
  userSkills  UserSkills[]
  companyTags CompanyTags[]

  @@index([name])
}

model JobTags {
  job_id     Int
  tag_id     Int
  created_at DateTime @default(now())

  job Jobs @relation(fields: [job_id], references: [id])
  tag Tags @relation(fields: [tag_id], references: [id])

  @@id([job_id, tag_id])
}

model Applications {
  id                Int               @id @default(autoincrement())
  job_id            Int
  user_id           String            @db.Uuid
  test_id           Int?
  cv_url            String?           @db.VarChar(255)
  cover_letter      String?
  expected_salary   Decimal           @db.Decimal(12, 2)
  status            ApplicationStatus @default(SUBMITTED)
  feedback          String?
  test_score        Decimal?          @db.Decimal(5, 2)
  test_completed_at DateTime?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt

  user       Users                  @relation(fields: [user_id], references: [id])
  job        Jobs                   @relation(fields: [job_id], references: [id])
  test       PreSelectionTests?     @relation(fields: [test_id], references: [id])
  histories  ApplicationHistories[]
  interviews Interviews[]
  answers    PreSelectionAnswers[]

  @@unique([user_id, job_id])
}

model ApplicationHistories {
  id              Int               @id @default(autoincrement())
  application_id  Int
  previous_status ApplicationStatus
  new_status      ApplicationStatus
  changed_by      String            @db.Uuid
  notes           String?
  deleted_at      DateTime?
  changed_at      DateTime          @default(now())

  application Applications @relation(fields: [application_id], references: [id])
  user        Users        @relation("HistoryChangedBy", fields: [changed_by], references: [id])

  @@index([deleted_at])
}

model Interviews {
  id             Int             @id @default(autoincrement())
  application_id Int
  schedule_date  DateTime
  interview_type InterviewType
  location       String?         @db.VarChar(255)
  meeting_link   String?         @db.VarChar(255)
  status         InterviewStatus @default(SCHEDULED)
  notes          String?
  deleted_at     DateTime?
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  changed_by     String?         @db.Uuid

  application Applications @relation(fields: [application_id], references: [id])
  user        Users?       @relation("InterviewChangedBy", fields: [changed_by], references: [id])

  @@index([deleted_at])
}

// -----------------------------------------------------------
// SUBSCRIPTION AND PAYMENTS
// -----------------------------------------------------------
model SubscriptionPlans {
  id               Int     @id @default(autoincrement())
  plan_name        String  @unique @db.VarChar(50)
  price            Decimal @db.Decimal(12, 2)
  duration_in_days Int
  features         String?

  subscriptions Subscriptions[]
}

model Subscriptions {
  id          Int                @id @default(autoincrement())
  user_id     String             @db.Uuid
  plan_id     Int
  status      SubscriptionStatus @default(PENDING)
  start_date  DateTime
  end_date    DateTime
  approved_by String?            @db.Uuid
  deleted_at  DateTime?
  created_at  DateTime           @default(now())
  updated_at  DateTime           @updatedAt

  user     Users             @relation(fields: [user_id], references: [id])
  plan     SubscriptionPlans @relation(fields: [plan_id], references: [id])
  approver Users?            @relation("ApprovedBy", fields: [approved_by], references: [id])
  payments Payments[]

  @@index([deleted_at])
}

model Payments {
  id              Int           @id @default(autoincrement())
  subscription_id Int
  amount          Decimal       @db.Decimal(12, 2)
  currency        String        @default("IDR") @db.VarChar(10)
  status          PaymentStatus
  payment_method  PaymentMethod
  proof_url       String?       @db.VarChar(255)
  transaction_id  String        @unique @db.VarChar(255)
  paid_at         DateTime?
  created_at      DateTime      @default(now())

  subscription Subscriptions @relation(fields: [subscription_id], references: [id])
}

// -----------------------------------------------------------
// PRE-SELECTION TEST
// -----------------------------------------------------------
model PreSelectionTests {
  id         Int       @id @default(autoincrement())
  job_id     Int       @unique
  title      String    @db.VarChar(150)
  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  job          Jobs                    @relation(fields: [job_id], references: [id])
  questions    PreSelectionQuestions[]
  applications Applications[]
}

model PreSelectionQuestions {
  id             Int            @id @default(autoincrement())
  test_id        Int
  question       String
  option_a       String         @db.VarChar(255)
  option_b       String         @db.VarChar(255)
  option_c       String         @db.VarChar(255)
  option_d       String         @db.VarChar(255)
  correct_answer QuestionOption
  deleted_at     DateTime?

  test    PreSelectionTests     @relation(fields: [test_id], references: [id])
  answers PreSelectionAnswers[]

  @@index([deleted_at])
}

model PreSelectionAnswers {
  application_id Int
  question_id    Int
  user_answer    QuestionOption
  is_correct     Boolean
  created_at     DateTime       @default(now())

  application Applications          @relation(fields: [application_id], references: [id])
  question    PreSelectionQuestions @relation(fields: [question_id], references: [id])

  @@id([application_id, question_id])
}

// -----------------------------------------------------------
// MANY-TO-MANY RELATIONSHIPS
// -----------------------------------------------------------
model UserSkills {
  user_id    String   @db.Uuid
  tag_id     Int
  created_at DateTime @default(now())

  user Users @relation(fields: [user_id], references: [id])
  tag  Tags  @relation(fields: [tag_id], references: [id])

  @@id([user_id, tag_id])
}

model CompanyTags {
  company_id Int
  tag_id     Int
  created_at DateTime @default(now())

  company Companies @relation(fields: [company_id], references: [id])
  tag     Tags      @relation(fields: [tag_id], references: [id])

  @@id([company_id, tag_id])
}
